//Load the requirejs optimizer
var requirejs = require('<%= rjs_path %>'),
  //Set up basic config, include config that is
  //common to all the optimize() calls.
  baseConfig = <%=
    modifiedHash = build_config.select {|k, _| k != "modules" && k != "bundles" }
    pathsHash = modifiedHash["paths"]
    modifiedHash["paths"] = pathsHash.select {|_, v| !v.is_a?(Array)} if !pathsHash.nil?

    JSON.pretty_generate(modifiedHash)
  %>;

// Function used to mix in baseConfig to a new config target
function mix(target) {
  for (var prop in baseConfig) {
    if (baseConfig.hasOwnProperty(prop)) {
      target[prop] = baseConfig[prop];
    }
  }
  return target;
}
function module_to_bundle(mods){
  bundles = {}
  for (var i = mods.length - 1; i >= 0; i--) {
    mod = mods[i]
    bundles[mod['name']] = mod['include']
  };
  return bundles
}



// (build_config['modules'] << normalize_bundles(build_config['bundles']))
//TODO 创建bundle 相应空文件
<%
  arr = []
  bundles = build_config['bundles']
  if !bundles.blank?
    bundles.each do |key, value|
      m = Hash.new
      m['name'] = key
      m['include'] = value
      arr << m
    end
  end
  arr.concat(build_config['modules'])
  build_config['modules'] = arr

  build_config['modules'].each do |mod|
    if build_config['priority'].include? mod['name']
      exclude_modules = []
    else
      exclude_modules = bundles.keys.select {|v| v !=mod['name'] }
    end
    mod['exclude'] = mod['exclude'] ? (mod['exclude'] + exclude_modules).uniq : exclude_modules
  end

  module_specs = build_config['modules'].map do |m|
    m.merge 'out' => module_path_for(m).to_s
  end
    %>

var module_specs = <%= JSON.pretty_generate module_specs  %>
// Error handler invoked in case requirejs compilation fails
var errback = function(error) {
  process.stderr.write(error.toString());
  process.exit(1);
}

<%

  priority_specs = module_specs.select {| mod |  build_config['priority'].include? mod['name'] }

%>

priority_specs = <%=
  JSON.pretty_generate priority_specs
 %>

// Do a series of builds of individual files, using the args suggested by:
// http://requirejs.org/docs/optimization.html#onejs
//
// r.js will eventually need a nested call idiom to handle async
// builds.  Anticipating that need.
var async_runner = priority_specs.reduceRight(function(prev, curr) {
  return function (buildReportText) {
    requirejs.optimize(mix(curr), prev, errback);
  };
}, function(buildReportText) {
  baseConfig['bundles'] = module_to_bundle(priority_specs);
  baseConfig['modules'] = <%= JSON.pretty_generate (module_specs.select {| mod |  !build_config['priority'].include? mod['name']) %>
  requirejs.optimize(baseConfig,function(){})
});


// baseConfig['modules'] = module_specs;
// requirejs.optimize(baseConfig,function(){});

async_runner();